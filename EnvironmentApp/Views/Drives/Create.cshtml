@using EnvironmentApp.Classes
@model EnvironmentApp.Models.Drive

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/jquery-3.3.1.js"></script>
$.ajax({
                   type: 'POST',
                   url: rootURL + 'Partial/AgingReport',
                   data: { filtertype: 'Department', filter: $('#ddlFilter').val() },
                   cache: false
               }).done(function (html) {
                   $('#dResults').html(html);
                   $('#dWaiting').dialog("close");
               });
<script>
    $(document).ready(function () {
        $("#ddlServers").prop("disabled", true);
        $("#ddlApps").change(function () {
            if ($("#ddlApps").val() != "--Select--") {
                url = "/Drives/GetServers";
                type = "POST";
                data = JSON.stringify({ code: $("#ddlApps").val() })
                datatype = "json";
                contentType = "application.json";
                success = function (servers) {
                    var ddl = $('#ddlServers');
                    ddl.empty();
                    $(document.createElement('option'))
                        .attr('value', "")
                        .text("--Select--")
                        .appendTo(ddl);
                    $(data).each(function () {
                        $(document.createElement('option'))
                            .attr('value', this.Value)
                            .text(this.Text)
                            .appendTo(ddl);
                        $(data).each(function () {
                            $(document.createElement('option'))
                                .attr('value', this.Value)
                                .text(this.Text)
                                .appendTo(ddl);
                        });
                    });
                    options.error = function () { alert("Error retrieving server names!"); };
                    $.ajax(options);
                };
                    
            }
            else {
                $("#ddlServers").empty();
                $("#ddlServers").prop("disabled", true);
            };
        });
    });
</script>
<h2>Create</h2>

@using (Html.BeginForm("Create", "Drives", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <h4>Drive</h4>
    <hr />
    <div class="row">
        <div class="form-group col-md-6">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Standard.Application.appCode, "Application", htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.DropDownListFor(model => model.Standard.Application.appCode, new SelectList(DropDowns.ApplicationList(), "Value", "Text"), "--Select--", htmlAttributes: new { @id = "ddlApps", @class = "form-control col-md-12", style = "height: 45px;" })
            @Html.ValidationMessageFor(model => model.Standard.Application.appCode, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.sName, "Server Name", htmlAttributes: new { @class = "control-label col-md-6" })
            @*@Html.DropDownListFor(model => model.sName, new SelectList(DropDowns.StandardsList(), "Value", "Text"), htmlAttributes: new { @id = "ddlServers", @class = "form-control col-md-12", style = "height: 45px;" })*@
            <select id="ddlServers" class="form-control col-md-12" style="height: 45px;"></select>
            @Html.ValidationMessageFor(model => model.sName, "", new { @class = "text-danger" })
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskCSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskCSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskCSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskCName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskCName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskCName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskDSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskDSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskDSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskDName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskDName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskDName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskESize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskESize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskESize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskEName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskEName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskEName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskFSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskFSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskFSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskFName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskFName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskFName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskKSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskKSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskKSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskKName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskKName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskKName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskLSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskLSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskLSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskLName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskLName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskLName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskMSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskMSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskMSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskMName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskMName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskMName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskPSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskPSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskPSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskPName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskPName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskPName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskTSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskTSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskTSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskTName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskTName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskTName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskSSize, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskSSize, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskSSize, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.diskSName, htmlAttributes: new { @class = "control-label col-md-6" })
            @Html.EditorFor(model => model.diskSName, new { htmlAttributes = new { @class = "form-control col-md-12" } })
            @Html.ValidationMessageFor(model => model.diskSName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
